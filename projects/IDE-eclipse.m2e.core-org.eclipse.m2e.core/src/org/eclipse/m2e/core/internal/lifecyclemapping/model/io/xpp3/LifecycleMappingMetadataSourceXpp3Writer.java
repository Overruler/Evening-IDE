/*
 =================== DO NOT EDIT THIS FILE ====================
 Generated by Modello 1.4.1 on 2014-10-24 21:03:25,
 any modifications will be overwritten.
 ==============================================================
 */

package org.eclipse.m2e.core.internal.lifecyclemapping.model.io.xpp3;

  //---------------------------------/
 //- Imported classes and packages -/
//---------------------------------/

import java.io.OutputStream;
import java.io.Writer;
import java.text.DateFormat;
import java.util.Iterator;
import java.util.Locale;
import org.codehaus.plexus.util.xml.Xpp3Dom;
import org.codehaus.plexus.util.xml.pull.MXSerializer;
import org.codehaus.plexus.util.xml.pull.XmlSerializer;
import org.eclipse.m2e.core.internal.lifecyclemapping.model.LifecycleMappingMetadata;
import org.eclipse.m2e.core.internal.lifecyclemapping.model.LifecycleMappingMetadataSource;
import org.eclipse.m2e.core.internal.lifecyclemapping.model.PluginExecutionFilter;
import org.eclipse.m2e.core.internal.lifecyclemapping.model.PluginExecutionMetadata;

/**
 * Class LifecycleMappingMetadataSourceXpp3Writer.
 * 
 * @version $Revision$ $Date$
 */
@SuppressWarnings( "all" )
public class LifecycleMappingMetadataSourceXpp3Writer
{

      //--------------------------/
     //- Class/Member Variables -/
    //--------------------------/

    /**
     * Field NAMESPACE.
     */
    private static final String NAMESPACE = null;


      //-----------/
     //- Methods -/
    //-----------/

    /**
     * Method write.
     * 
     * @param writer
     * @param lifecycleMappingMetadataSource
     * @throws java.io.IOException
     */
    public void write( Writer writer, LifecycleMappingMetadataSource lifecycleMappingMetadataSource )
        throws java.io.IOException
    {
        XmlSerializer serializer = new MXSerializer();
        serializer.setProperty( "http://xmlpull.org/v1/doc/properties.html#serializer-indentation", "  " );
        serializer.setProperty( "http://xmlpull.org/v1/doc/properties.html#serializer-line-separator", "\n" );
        serializer.setOutput( writer );
        serializer.startDocument( lifecycleMappingMetadataSource.getModelEncoding(), null );
        writeLifecycleMappingMetadataSource( lifecycleMappingMetadataSource, "lifecycleMappingMetadata", serializer );
        serializer.endDocument();
    } //-- void write( Writer, LifecycleMappingMetadataSource )

    /**
     * Method write.
     * 
     * @param stream
     * @param lifecycleMappingMetadataSource
     * @throws java.io.IOException
     */
    public void write( OutputStream stream, LifecycleMappingMetadataSource lifecycleMappingMetadataSource )
        throws java.io.IOException
    {
        XmlSerializer serializer = new MXSerializer();
        serializer.setProperty( "http://xmlpull.org/v1/doc/properties.html#serializer-indentation", "  " );
        serializer.setProperty( "http://xmlpull.org/v1/doc/properties.html#serializer-line-separator", "\n" );
        serializer.setOutput( stream, lifecycleMappingMetadataSource.getModelEncoding() );
        serializer.startDocument( lifecycleMappingMetadataSource.getModelEncoding(), null );
        writeLifecycleMappingMetadataSource( lifecycleMappingMetadataSource, "lifecycleMappingMetadata", serializer );
        serializer.endDocument();
    } //-- void write( OutputStream, LifecycleMappingMetadataSource )

    /**
     * Method writeLifecycleMappingMetadata.
     * 
     * @param lifecycleMappingMetadata
     * @param serializer
     * @param tagName
     * @throws java.io.IOException
     */
    private void writeLifecycleMappingMetadata( LifecycleMappingMetadata lifecycleMappingMetadata, String tagName, XmlSerializer serializer )
        throws java.io.IOException
    {
        serializer.startTag( NAMESPACE, tagName );
        if ( lifecycleMappingMetadata.getPackagingType() != null )
        {
            serializer.startTag( NAMESPACE, "packagingType" ).text( lifecycleMappingMetadata.getPackagingType() ).endTag( NAMESPACE, "packagingType" );
        }
        if ( lifecycleMappingMetadata.getLifecycleMappingId() != null )
        {
            serializer.startTag( NAMESPACE, "lifecycleMappingId" ).text( lifecycleMappingMetadata.getLifecycleMappingId() ).endTag( NAMESPACE, "lifecycleMappingId" );
        }
        if ( lifecycleMappingMetadata.getLifecycleMappingVersionRange() != null )
        {
            serializer.startTag( NAMESPACE, "lifecycleMappingVersionRange" ).text( lifecycleMappingMetadata.getLifecycleMappingVersionRange() ).endTag( NAMESPACE, "lifecycleMappingVersionRange" );
        }
        if ( ( lifecycleMappingMetadata.getPluginExecutions() != null ) && ( lifecycleMappingMetadata.getPluginExecutions().size() > 0 ) )
        {
            serializer.startTag( NAMESPACE, "pluginExecutions" );
            for ( Iterator iter = lifecycleMappingMetadata.getPluginExecutions().iterator(); iter.hasNext(); )
            {
                PluginExecutionMetadata o = (PluginExecutionMetadata) iter.next();
                writePluginExecutionMetadata( o, "pluginExecution", serializer );
            }
            serializer.endTag( NAMESPACE, "pluginExecutions" );
        }
        serializer.endTag( NAMESPACE, tagName );
    } //-- void writeLifecycleMappingMetadata( LifecycleMappingMetadata, String, XmlSerializer )

    /**
     * Method writeLifecycleMappingMetadataSource.
     * 
     * @param lifecycleMappingMetadataSource
     * @param serializer
     * @param tagName
     * @throws java.io.IOException
     */
    private void writeLifecycleMappingMetadataSource( LifecycleMappingMetadataSource lifecycleMappingMetadataSource, String tagName, XmlSerializer serializer )
        throws java.io.IOException
    {
        serializer.startTag( NAMESPACE, tagName );
        if ( ( lifecycleMappingMetadataSource.getLifecycleMappings() != null ) && ( lifecycleMappingMetadataSource.getLifecycleMappings().size() > 0 ) )
        {
            serializer.startTag( NAMESPACE, "lifecycleMappings" );
            for ( Iterator iter = lifecycleMappingMetadataSource.getLifecycleMappings().iterator(); iter.hasNext(); )
            {
                LifecycleMappingMetadata o = (LifecycleMappingMetadata) iter.next();
                writeLifecycleMappingMetadata( o, "lifecycleMapping", serializer );
            }
            serializer.endTag( NAMESPACE, "lifecycleMappings" );
        }
        if ( ( lifecycleMappingMetadataSource.getPluginExecutions() != null ) && ( lifecycleMappingMetadataSource.getPluginExecutions().size() > 0 ) )
        {
            serializer.startTag( NAMESPACE, "pluginExecutions" );
            for ( Iterator iter = lifecycleMappingMetadataSource.getPluginExecutions().iterator(); iter.hasNext(); )
            {
                PluginExecutionMetadata o = (PluginExecutionMetadata) iter.next();
                writePluginExecutionMetadata( o, "pluginExecution", serializer );
            }
            serializer.endTag( NAMESPACE, "pluginExecutions" );
        }
        serializer.endTag( NAMESPACE, tagName );
    } //-- void writeLifecycleMappingMetadataSource( LifecycleMappingMetadataSource, String, XmlSerializer )

    /**
     * Method writePluginExecutionFilter.
     * 
     * @param pluginExecutionFilter
     * @param serializer
     * @param tagName
     * @throws java.io.IOException
     */
    private void writePluginExecutionFilter( PluginExecutionFilter pluginExecutionFilter, String tagName, XmlSerializer serializer )
        throws java.io.IOException
    {
        serializer.startTag( NAMESPACE, tagName );
        if ( pluginExecutionFilter.getGroupId() != null )
        {
            serializer.startTag( NAMESPACE, "groupId" ).text( pluginExecutionFilter.getGroupId() ).endTag( NAMESPACE, "groupId" );
        }
        if ( pluginExecutionFilter.getArtifactId() != null )
        {
            serializer.startTag( NAMESPACE, "artifactId" ).text( pluginExecutionFilter.getArtifactId() ).endTag( NAMESPACE, "artifactId" );
        }
        if ( pluginExecutionFilter.getVersionRange() != null )
        {
            serializer.startTag( NAMESPACE, "versionRange" ).text( pluginExecutionFilter.getVersionRange() ).endTag( NAMESPACE, "versionRange" );
        }
        if ( ( pluginExecutionFilter.getGoals() != null ) && ( pluginExecutionFilter.getGoals().size() > 0 ) )
        {
            serializer.startTag( NAMESPACE, "goals" );
            for ( Iterator iter = pluginExecutionFilter.getGoals().iterator(); iter.hasNext(); )
            {
                String goal = (String) iter.next();
                serializer.startTag( NAMESPACE, "goal" ).text( goal ).endTag( NAMESPACE, "goal" );
            }
            serializer.endTag( NAMESPACE, "goals" );
        }
        if ( ( pluginExecutionFilter.getParameters() != null ) && ( pluginExecutionFilter.getParameters().size() > 0 ) )
        {
            serializer.startTag( NAMESPACE, "parameters" );
            for ( Iterator iter = pluginExecutionFilter.getParameters().keySet().iterator(); iter.hasNext(); )
            {
                String key = (String) iter.next();
                String value = (String) pluginExecutionFilter.getParameters().get( key );
                serializer.startTag( NAMESPACE, "" + key + "" ).text( value ).endTag( NAMESPACE, "" + key + "" );
            }
            serializer.endTag( NAMESPACE, "parameters" );
        }
        serializer.endTag( NAMESPACE, tagName );
    } //-- void writePluginExecutionFilter( PluginExecutionFilter, String, XmlSerializer )

    /**
     * Method writePluginExecutionMetadata.
     * 
     * @param pluginExecutionMetadata
     * @param serializer
     * @param tagName
     * @throws java.io.IOException
     */
    private void writePluginExecutionMetadata( PluginExecutionMetadata pluginExecutionMetadata, String tagName, XmlSerializer serializer )
        throws java.io.IOException
    {
        serializer.startTag( NAMESPACE, tagName );
        if ( pluginExecutionMetadata.getFilter() != null )
        {
            writePluginExecutionFilter( (PluginExecutionFilter) pluginExecutionMetadata.getFilter(), "pluginExecutionFilter", serializer );
        }
        if ( pluginExecutionMetadata.getActionDom() != null )
        {
            ((Xpp3Dom) pluginExecutionMetadata.getActionDom()).writeToSerializer( NAMESPACE, serializer );
        }
        if ( pluginExecutionMetadata.getComment() != null )
        {
            serializer.startTag( NAMESPACE, "comment" ).text( pluginExecutionMetadata.getComment() ).endTag( NAMESPACE, "comment" );
        }
        serializer.endTag( NAMESPACE, tagName );
    } //-- void writePluginExecutionMetadata( PluginExecutionMetadata, String, XmlSerializer )

}
